{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lefi A discord API wrapper focused on clean code, and usability Features Asynchronous - Almost everything is async except for few unavoidable ones. Object oriented - Allows for easy usage Get started here","title":"Home"},{"location":"#lefi","text":"A discord API wrapper focused on clean code, and usability","title":"Lefi"},{"location":"#features","text":"Asynchronous - Almost everything is async except for few unavoidable ones. Object oriented - Allows for easy usage Get started here","title":"Features"},{"location":"getting-started/","text":"Getting started Table of contents Installation Basic usage Installing To install the wrapper you can use pip , poetry or any other manager you use. Note: It is recommended to use poetry or any other venv when downloading Poetry poetry add git+https://github.com/an-dyy/Lefi.git Pip pip install git+https://github.com/an-dyy/Lefi.git Examples import os import asyncio import lefi async def main () -> None : token = os . getenv ( \"discord_token\" ) # NOTE: I'm on linux so I can just export, windows might need a `.env` client = lefi . Client ( token ) # type: ignore @client . on ( \"message_create\" ) async def message_create ( message : lefi . Message ) -> None : print ( message ) await client . start () asyncio . run ( main ())","title":"Getting-Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#table-of-contents","text":"Installation Basic usage","title":"Table of contents"},{"location":"getting-started/#installing","text":"To install the wrapper you can use pip , poetry or any other manager you use. Note: It is recommended to use poetry or any other venv when downloading Poetry poetry add git+https://github.com/an-dyy/Lefi.git Pip pip install git+https://github.com/an-dyy/Lefi.git","title":"Installing"},{"location":"getting-started/#examples","text":"import os import asyncio import lefi async def main () -> None : token = os . getenv ( \"discord_token\" ) # NOTE: I'm on linux so I can just export, windows might need a `.env` client = lefi . Client ( token ) # type: ignore @client . on ( \"message_create\" ) async def message_create ( message : lefi . Message ) -> None : print ( message ) await client . start () asyncio . run ( main ())","title":"Examples"},{"location":"API-Reference/client/","text":"A class used to communicate with the discord API and its gateway. Attributes: Name Type Description pub_key Optional[str] The client's public key. Used when handling interactions over HTTP. loop asyncio.AbstractEventLoop The asyncio.AbstractEventLoop which is being used. http lefi.HTTPClient The HTTPClient to use for handling requests to the API. ws lefi.WebSocketClient The WebSocketClient which handles the gateway. __init__ ( self , token , * , intents = None , pub_key = None , loop = None ) special Parameters: Name Type Description Default token str The clients token, used for authorization (logging in, etc...) This is required. required intents Optional[lefi.Intents] The intents to be used for the client. None pub_key Optional[str] The public key of the client. Only pass if you want interactions over HTTP. None loop Optional[asyncio.AbstractEventLoop] The loop to use. None Source code in lefi/client.py def __init__ ( self , token : str , * , intents : Intents = None , pub_key : Optional [ str ] = None , loop : Optional [ asyncio . AbstractEventLoop ] = None , ): \"\"\" Parameters: token (str): The clients token, used for authorization (logging in, etc...) This is required. intents (Optional[lefi.Intents]): The intents to be used for the client. pub_key (Optional[str]): The public key of the client. Only pass if you want interactions over HTTP. loop (Optional[asyncio.AbstractEventLoop]): The loop to use. \"\"\" self . pub_key : Optional [ str ] = pub_key self . loop : asyncio . AbstractEventLoop = loop or asyncio . get_event_loop () self . http : HTTPClient = HTTPClient ( token , self . loop ) self . _state : State = State ( self , self . loop ) self . ws : WebSocketClient = WebSocketClient ( self , intents ) self . events : Dict [ str , List [ Callable [ ... , Any ]]] = {} self . once_events : Dict [ str , List [ Callable [ ... , Any ]]] = {} self . futures : Dict [ str , List [ Tuple [ asyncio . Future , Callable [ ... , bool ]]]] = {} add_listener ( self , func , event_name ) Registers listener, basically connecting an event to a callback. Parameters: Name Type Description Default func Callable[..., Coroutine] The callback to register for an event. required event_name Optional[str] The event to register, if None it will pass the decorated functions name. required Source code in lefi/client.py def add_listener ( self , func : Callable [ ... , Coroutine ], event_name : Optional [ str ], ) -> None : \"\"\" Registers listener, basically connecting an event to a callback. Parameters: func (Callable[..., Coroutine]): The callback to register for an event. event_name (Optional[str]): The event to register, if None it will pass the decorated functions name. \"\"\" name = event_name or func . __name__ if not inspect . iscoroutinefunction ( func ): raise TypeError ( \"Callback must be a coroutine\" ) callbacks = self . events . setdefault ( name , []) callbacks . append ( func ) on ( self , event_name = None ) A decorator that registers the decorated function to an event. Parameters: Name Type Description Default event_name Optional[str] The event to register. None Note The function being decorated must be a coroutine. Multiple functions can be decorated with the same event. Although you will need to pass the event name and give functions different names. And if no event name is passed it defaults to the functions name. Returns: Type Description Callable[..., Callable[..., Coroutine]] The decorated function after registering it as a listener. Source code in lefi/client.py def on ( self , event_name : Optional [ str ] = None ) -> Callable [ ... , Callable [ ... , Coroutine ]]: \"\"\" A decorator that registers the decorated function to an event. Parameters: event_name (Optional[str]): The event to register. Note: The function being decorated must be a coroutine. Multiple functions can be decorated with the same event. Although you will need to pass the event name and give functions different names. And if no event name is passed it defaults to the functions name. Returns: The decorated function after registering it as a listener. \"\"\" def inner ( func : Callable [ ... , Coroutine ]) -> Callable [ ... , Coroutine ]: self . add_listener ( func , event_name ) return func return inner once ( self , event_name = None ) A decorator that registers the decorated function to an event. Similar to lefi.Client.on but also cuts itself off the event after firing once. Meaning it will only run once. Parameters: Name Type Description Default event_name Optional[str] The event to register. None Note Functions must be coroutines. Multiple functions can be decorated with this that have the same event. Functions decorated with lefi.Client.once take precedence over the regular events. Returns: Type Description Callable[..., Callable[..., Coroutine]] The decorated function after registering it as a listener. Source code in lefi/client.py def once ( self , event_name : Optional [ str ] = None ) -> Callable [ ... , Callable [ ... , Coroutine ]]: \"\"\" A decorator that registers the decorated function to an event. Similar to [lefi.Client.on][] but also cuts itself off the event after firing once. Meaning it will only run once. Parameters: event_name (Optional[str]): The event to register. Note: Functions must be coroutines. Multiple functions can be decorated with this that have the same event. Functions decorated with [lefi.Client.once][] take precedence over the regular events. Returns: The decorated function after registering it as a listener. \"\"\" def inner ( func : Callable [ ... , Coroutine ]) -> Callable [ ... , Coroutine ]: name = event_name or func . __name__ if not inspect . iscoroutinefunction ( func ): raise TypeError ( \"Callback must be a coroutine\" ) callbacks = self . once_events . setdefault ( name , []) callbacks . append ( func ) return func return inner connect ( self ) async A method which starts the connection to the gateway. Source code in lefi/client.py async def connect ( self ) -> None : \"\"\" A method which starts the connection to the gateway. \"\"\" await self . ws . start () login ( self ) async A method which \"logs\" in with the token to make sure it is valid. This is to make sure that proper authorization has been passed. Source code in lefi/client.py async def login ( self ) -> None : \"\"\" A method which \"logs\" in with the token to make sure it is valid. This is to make sure that proper authorization has been passed. \"\"\" await self . http . login () start ( self ) async A method which calls lefi.Client.login and lefi.Client.connect in that order. If pub_key is passed to the clients constructor it also creates an HTTP server to handle interactions. Source code in lefi/client.py async def start ( self ) -> None : \"\"\" A method which calls [lefi.Client.login][] and [lefi.Client.connect][] in that order. If `pub_key` is passed to the clients constructor it also creates an HTTP server to handle interactions. \"\"\" if self . pub_key : self . server = App ( self , self . pub_key ) await self . server . run () await asyncio . gather ( self . login (), self . connect ()) get_message ( self , id ) Grabs a lefi.Message instance if cached. Parameters: Name Type Description Default id int The message's ID. required Returns: Type Description Optional[Message] The lefi.Message instance related to the ID. Else None if not found. Source code in lefi/client.py def get_message ( self , id : int ) -> Optional [ Message ]: \"\"\" Grabs a [lefi.Message][] instance if cached. Parameters: id (int): The message's ID. Returns: The [lefi.Message][] instance related to the ID. Else None if not found. \"\"\" return self . _state . get_message ( id ) get_guild ( self , id ) Grabs a lefi.Guild instance if cached. Parameters: Name Type Description Default id int The guild's ID. required Returns: Type Description Optional[Guild] The lefi.Guild instance related to the ID. Else None if not found Source code in lefi/client.py def get_guild ( self , id : int ) -> Optional [ Guild ]: \"\"\" Grabs a [lefi.Guild][] instance if cached. Parameters: id (int): The guild's ID. Returns: The [lefi.Guild][] instance related to the ID. Else None if not found \"\"\" return self . _state . get_guild ( id ) get_channel ( self , id ) Grabs a lefi.Channel instance if cached. Parameters: Name Type Description Default id int The channel's ID. required Returns: Type Description Optional[Union[TextChannel, VoiceChannel, DMChannel, CategoryChannel, Channel]] The lefi.Channel instance related to the ID. Else None if not found Source code in lefi/client.py def get_channel ( self , id : int ) -> Optional [ Union [ TextChannel , VoiceChannel , DMChannel , CategoryChannel , Channel ] ]: \"\"\" Grabs a [lefi.Channel][] instance if cached. Parameters: id (int): The channel's ID. Returns: The [lefi.Channel][] instance related to the ID. Else None if not found \"\"\" return self . _state . get_channel ( id ) get_user ( self , id ) Grabs a lefi.User instance if cached. Parameters: Name Type Description Default id int The user's ID. required Returns: Type Description Optional[User] The lefi.User instance related to the ID. Else None if not found Source code in lefi/client.py def get_user ( self , id : int ) -> Optional [ User ]: \"\"\" Grabs a [lefi.User][] instance if cached. Parameters: id (int): The user's ID. Returns: The [lefi.User][] instance related to the ID. Else None if not found \"\"\" return self . _state . get_user ( id ) wait_for ( self , event , * , check = None , timeout = None ) async Waits for an event to be dispatched that passes the check. Parameters: Name Type Description Default event str The event to wait for. required check Callable[..., bool] A function that takes the same args as the event, and returns a bool. None timeout float The time to wait before stopping. None Returns: Type Description Any The return from a callback that matches with the event you are waiting for. Note The check has to take in the same args as the event. If no check is passed, everything will complete the check. Source code in lefi/client.py async def wait_for ( self , event : str , * , check : Callable [ ... , bool ] = None , timeout : float = None ) -> Any : \"\"\" Waits for an event to be dispatched that passes the check. Parameters: event (str): The event to wait for. check (Callable[..., bool]): A function that takes the same args as the event, and returns a bool. timeout (float): The time to wait before stopping. Returns: The return from a callback that matches with the event you are waiting for. Note: The check has to take in the same args as the event. If no check is passed, everything will complete the check. \"\"\" future = self . loop . create_future () futures = self . futures . setdefault ( event , []) if check is None : check = lambda * args : True futures . append (( future , check )) return await asyncio . wait_for ( future , timeout = timeout )","title":"Client"},{"location":"API-Reference/client/#lefi.client.Client.__init__","text":"Parameters: Name Type Description Default token str The clients token, used for authorization (logging in, etc...) This is required. required intents Optional[lefi.Intents] The intents to be used for the client. None pub_key Optional[str] The public key of the client. Only pass if you want interactions over HTTP. None loop Optional[asyncio.AbstractEventLoop] The loop to use. None Source code in lefi/client.py def __init__ ( self , token : str , * , intents : Intents = None , pub_key : Optional [ str ] = None , loop : Optional [ asyncio . AbstractEventLoop ] = None , ): \"\"\" Parameters: token (str): The clients token, used for authorization (logging in, etc...) This is required. intents (Optional[lefi.Intents]): The intents to be used for the client. pub_key (Optional[str]): The public key of the client. Only pass if you want interactions over HTTP. loop (Optional[asyncio.AbstractEventLoop]): The loop to use. \"\"\" self . pub_key : Optional [ str ] = pub_key self . loop : asyncio . AbstractEventLoop = loop or asyncio . get_event_loop () self . http : HTTPClient = HTTPClient ( token , self . loop ) self . _state : State = State ( self , self . loop ) self . ws : WebSocketClient = WebSocketClient ( self , intents ) self . events : Dict [ str , List [ Callable [ ... , Any ]]] = {} self . once_events : Dict [ str , List [ Callable [ ... , Any ]]] = {} self . futures : Dict [ str , List [ Tuple [ asyncio . Future , Callable [ ... , bool ]]]] = {}","title":"__init__()"},{"location":"API-Reference/client/#lefi.client.Client.add_listener","text":"Registers listener, basically connecting an event to a callback. Parameters: Name Type Description Default func Callable[..., Coroutine] The callback to register for an event. required event_name Optional[str] The event to register, if None it will pass the decorated functions name. required Source code in lefi/client.py def add_listener ( self , func : Callable [ ... , Coroutine ], event_name : Optional [ str ], ) -> None : \"\"\" Registers listener, basically connecting an event to a callback. Parameters: func (Callable[..., Coroutine]): The callback to register for an event. event_name (Optional[str]): The event to register, if None it will pass the decorated functions name. \"\"\" name = event_name or func . __name__ if not inspect . iscoroutinefunction ( func ): raise TypeError ( \"Callback must be a coroutine\" ) callbacks = self . events . setdefault ( name , []) callbacks . append ( func )","title":"add_listener()"},{"location":"API-Reference/client/#lefi.client.Client.on","text":"A decorator that registers the decorated function to an event. Parameters: Name Type Description Default event_name Optional[str] The event to register. None Note The function being decorated must be a coroutine. Multiple functions can be decorated with the same event. Although you will need to pass the event name and give functions different names. And if no event name is passed it defaults to the functions name. Returns: Type Description Callable[..., Callable[..., Coroutine]] The decorated function after registering it as a listener. Source code in lefi/client.py def on ( self , event_name : Optional [ str ] = None ) -> Callable [ ... , Callable [ ... , Coroutine ]]: \"\"\" A decorator that registers the decorated function to an event. Parameters: event_name (Optional[str]): The event to register. Note: The function being decorated must be a coroutine. Multiple functions can be decorated with the same event. Although you will need to pass the event name and give functions different names. And if no event name is passed it defaults to the functions name. Returns: The decorated function after registering it as a listener. \"\"\" def inner ( func : Callable [ ... , Coroutine ]) -> Callable [ ... , Coroutine ]: self . add_listener ( func , event_name ) return func return inner","title":"on()"},{"location":"API-Reference/client/#lefi.client.Client.once","text":"A decorator that registers the decorated function to an event. Similar to lefi.Client.on but also cuts itself off the event after firing once. Meaning it will only run once. Parameters: Name Type Description Default event_name Optional[str] The event to register. None Note Functions must be coroutines. Multiple functions can be decorated with this that have the same event. Functions decorated with lefi.Client.once take precedence over the regular events. Returns: Type Description Callable[..., Callable[..., Coroutine]] The decorated function after registering it as a listener. Source code in lefi/client.py def once ( self , event_name : Optional [ str ] = None ) -> Callable [ ... , Callable [ ... , Coroutine ]]: \"\"\" A decorator that registers the decorated function to an event. Similar to [lefi.Client.on][] but also cuts itself off the event after firing once. Meaning it will only run once. Parameters: event_name (Optional[str]): The event to register. Note: Functions must be coroutines. Multiple functions can be decorated with this that have the same event. Functions decorated with [lefi.Client.once][] take precedence over the regular events. Returns: The decorated function after registering it as a listener. \"\"\" def inner ( func : Callable [ ... , Coroutine ]) -> Callable [ ... , Coroutine ]: name = event_name or func . __name__ if not inspect . iscoroutinefunction ( func ): raise TypeError ( \"Callback must be a coroutine\" ) callbacks = self . once_events . setdefault ( name , []) callbacks . append ( func ) return func return inner","title":"once()"},{"location":"API-Reference/client/#lefi.client.Client.connect","text":"A method which starts the connection to the gateway. Source code in lefi/client.py async def connect ( self ) -> None : \"\"\" A method which starts the connection to the gateway. \"\"\" await self . ws . start ()","title":"connect()"},{"location":"API-Reference/client/#lefi.client.Client.login","text":"A method which \"logs\" in with the token to make sure it is valid. This is to make sure that proper authorization has been passed. Source code in lefi/client.py async def login ( self ) -> None : \"\"\" A method which \"logs\" in with the token to make sure it is valid. This is to make sure that proper authorization has been passed. \"\"\" await self . http . login ()","title":"login()"},{"location":"API-Reference/client/#lefi.client.Client.start","text":"A method which calls lefi.Client.login and lefi.Client.connect in that order. If pub_key is passed to the clients constructor it also creates an HTTP server to handle interactions. Source code in lefi/client.py async def start ( self ) -> None : \"\"\" A method which calls [lefi.Client.login][] and [lefi.Client.connect][] in that order. If `pub_key` is passed to the clients constructor it also creates an HTTP server to handle interactions. \"\"\" if self . pub_key : self . server = App ( self , self . pub_key ) await self . server . run () await asyncio . gather ( self . login (), self . connect ())","title":"start()"},{"location":"API-Reference/client/#lefi.client.Client.get_message","text":"Grabs a lefi.Message instance if cached. Parameters: Name Type Description Default id int The message's ID. required Returns: Type Description Optional[Message] The lefi.Message instance related to the ID. Else None if not found. Source code in lefi/client.py def get_message ( self , id : int ) -> Optional [ Message ]: \"\"\" Grabs a [lefi.Message][] instance if cached. Parameters: id (int): The message's ID. Returns: The [lefi.Message][] instance related to the ID. Else None if not found. \"\"\" return self . _state . get_message ( id )","title":"get_message()"},{"location":"API-Reference/client/#lefi.client.Client.get_guild","text":"Grabs a lefi.Guild instance if cached. Parameters: Name Type Description Default id int The guild's ID. required Returns: Type Description Optional[Guild] The lefi.Guild instance related to the ID. Else None if not found Source code in lefi/client.py def get_guild ( self , id : int ) -> Optional [ Guild ]: \"\"\" Grabs a [lefi.Guild][] instance if cached. Parameters: id (int): The guild's ID. Returns: The [lefi.Guild][] instance related to the ID. Else None if not found \"\"\" return self . _state . get_guild ( id )","title":"get_guild()"},{"location":"API-Reference/client/#lefi.client.Client.get_channel","text":"Grabs a lefi.Channel instance if cached. Parameters: Name Type Description Default id int The channel's ID. required Returns: Type Description Optional[Union[TextChannel, VoiceChannel, DMChannel, CategoryChannel, Channel]] The lefi.Channel instance related to the ID. Else None if not found Source code in lefi/client.py def get_channel ( self , id : int ) -> Optional [ Union [ TextChannel , VoiceChannel , DMChannel , CategoryChannel , Channel ] ]: \"\"\" Grabs a [lefi.Channel][] instance if cached. Parameters: id (int): The channel's ID. Returns: The [lefi.Channel][] instance related to the ID. Else None if not found \"\"\" return self . _state . get_channel ( id )","title":"get_channel()"},{"location":"API-Reference/client/#lefi.client.Client.get_user","text":"Grabs a lefi.User instance if cached. Parameters: Name Type Description Default id int The user's ID. required Returns: Type Description Optional[User] The lefi.User instance related to the ID. Else None if not found Source code in lefi/client.py def get_user ( self , id : int ) -> Optional [ User ]: \"\"\" Grabs a [lefi.User][] instance if cached. Parameters: id (int): The user's ID. Returns: The [lefi.User][] instance related to the ID. Else None if not found \"\"\" return self . _state . get_user ( id )","title":"get_user()"},{"location":"API-Reference/client/#lefi.client.Client.wait_for","text":"Waits for an event to be dispatched that passes the check. Parameters: Name Type Description Default event str The event to wait for. required check Callable[..., bool] A function that takes the same args as the event, and returns a bool. None timeout float The time to wait before stopping. None Returns: Type Description Any The return from a callback that matches with the event you are waiting for. Note The check has to take in the same args as the event. If no check is passed, everything will complete the check. Source code in lefi/client.py async def wait_for ( self , event : str , * , check : Callable [ ... , bool ] = None , timeout : float = None ) -> Any : \"\"\" Waits for an event to be dispatched that passes the check. Parameters: event (str): The event to wait for. check (Callable[..., bool]): A function that takes the same args as the event, and returns a bool. timeout (float): The time to wait before stopping. Returns: The return from a callback that matches with the event you are waiting for. Note: The check has to take in the same args as the event. If no check is passed, everything will complete the check. \"\"\" future = self . loop . create_future () futures = self . futures . setdefault ( event , []) if check is None : check = lambda * args : True futures . append (( future , check )) return await asyncio . wait_for ( future , timeout = timeout )","title":"wait_for()"}]}